%module(docstring="C++ backend for @DATATYPE@ matrices") pairinteraction_@DATATYPE@

%{
#define SWIG_FILE_WITH_INIT
#include "NumpyUtils.h"
#include "Traits.h"
#include "dtypes.h"
#include "Interface.h"
#include "State.h"
#include "SystemOne.h"
#include "SystemTwo.h"
%}


%init %{
import_array();
%}


%feature("autodoc", "3");


%include "attribute.i"
%include "exception.i"
%include "std_array.i"
%include "std_complex.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_set.i"


// Convert C++ exceptions to Python exceptions
// http://www.swig.org/Doc1.3/Library.html#Library_stl_exceptions
%exception {
  try {
    $action
  } catch (const std::exception& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  }
}


// Wrap the << operator
// http://stackoverflow.com/questions/2548779/how-to-stringfy-a-swig-matrix-object-in-python
%define __STR__()
std::string __str__() {
  std::ostringstream out;
  out << *$self;
  return out.str();
}
%enddef


// Make numpy wrappers
%define MAKE_NUMPY_TYPEMAP(TYPE...)
  %typemap(out) TYPE        { $result = numpy::convert<numpy::copy>( $1); }
  %typemap(out) TYPE &      { $result = numpy::convert<numpy::view>(*$1); }
  %typemap(out) TYPE const&
  {
    $result = numpy::convert<numpy::view>(*const_cast<
      traits::pointer_add_const< decltype($1) >::type >($1));
  }
  %typemap(in) TYPE // SWIG omits the exception handler here
  {
    try {
      $1 = numpy::as<TYPE>($input);
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
%enddef

MAKE_NUMPY_TYPEMAP(eigen_dense_t)
MAKE_NUMPY_TYPEMAP(eigen_vector_t)
MAKE_NUMPY_TYPEMAP(eigen_vector_double_t)
MAKE_NUMPY_TYPEMAP(eigen_sparse_t)
MAKE_NUMPY_TYPEMAP(eigen_sparse_double_t)

// Instantiate often used STL templates
namespace std {
  %template(ArrayStringTwo) array<string,2>;
  %template(ArrayIntTwo) array<int,2>;
  %template(ArrayFloatTwo) array<float,2>;
  %template(ArrayDoubleTwo) array<double,3>;
  %template(VectorInt) vector<int>;
  %template(VectorDouble) vector<double>;
  %template(VectorFloat) vector<float>;
  %template(VectorStateOne) vector<StateOne>;
  %template(VectorStateTwo) vector<StateTwo>;
  %template(VectorSizeT) vector<size_t>;
  %template(VectorComplexDouble) vector<std::complex<double>>;
  %template(SetInt) set<int>;
  %template(SetFloat) set<float>;
  %template(ArrayVectorSizeTTwo) array<std::vector<size_t>,2>;
  //TODO @hmenke %template(ArrayEigenVectorDoubleTwo) array<eigen_vector_double_t,2>;
};


%rename(__lt__) operator<;
%include "dtypes.h"


%include "Interface.h"


// Wrap State.h
%ignore hash;
%rename(__ostream__) operator<<;
%include "State.h"


%attribute(StateOne, double, energy, getEnergy);
%extend StateOne {
  __STR__();
};


%attribute(StateTwo, double, energy, getEnergy);
%extend StateTwo {
  __STR__();
};


// Wrap SystemBase.h
%include "SystemBase.h"

// Wrap SystemOne.h and SystemTwo.h
%template(_SystemStateOne) SystemBase<StateOne>;
%template(_SystemStateTwo) SystemBase<StateTwo>;

%copyctor SystemOne;
%copyctor SystemTwo;

%include "SystemOne.h"
%include "SystemTwo.h"

%attribute(SystemOne, std::vector<StateOne>&, states  , getStates  );
%attribute(SystemTwo, std::vector<StateTwo>&, states  , getStates  );


// Python specific extensions

// This block has to be the last in the Interface.i file, because it
// will be copied literally into the Python module and we want to
// overwrite specific methods, defined before.

%pythoncode %{

SystemOne.coefficients = property(SystemOne.getCoefficients)
SystemTwo.coefficients = property(SystemTwo.getCoefficients)
SystemOne.hamiltonianmatrix = property(SystemOne.getHamiltonianmatrix)
SystemTwo.hamiltonianmatrix = property(SystemTwo.getHamiltonianmatrix)
SystemOne.diagonal = property(SystemOne.getDiagonal)
SystemTwo.diagonal = property(SystemTwo.getDiagonal)

%}
