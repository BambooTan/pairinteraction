%module(docstring="C++ backend for @DATATYPE@ matrices") pairinteraction_@DATATYPE@

%{
#include "dtypes.h"
#include "Interface.h"
#include "State.h"
#include "Basis.h"
%}


%feature("autodoc", "3");


%include "attribute.i"
%include "exception.i"
%include "std_array.i"
%include "std_complex.i"
%include "std_string.i"
%include "std_vector.i"


// Convert C++ exceptions to Python exceptions
// http://www.swig.org/Doc1.3/Library.html#Library_stl_exceptions
%exception {
  try {
    $action
  } catch (const std::exception& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  }
}


// Wrap the << operator
// http://stackoverflow.com/questions/2548779/how-to-stringfy-a-swig-matrix-object-in-python
%define __STR__()
std::string __str__() {
  std::ostringstream out;
  out << *$self;
  return out.str();
}
%enddef


// Instantiate often used STL templates
namespace std {
  %template(ArrayStringTwo) array<string,2>;
  %template(ArrayIntTwo) array<int,2>;
  %template(ArrayFloatTwo) array<float,2>;
  %template(VectorInt) vector<int>;
  %template(VectorDouble) vector<double>;
  %template(VectorFloat) vector<float>;
  %template(VectorStateOne) vector<StateOne>;
  %template(VectorStateTwo) vector<StateTwo>;
  %template(VectorSizeT) vector<size_t>;
  %template(VectorComplexDouble) vector<std::complex<double>>;
};

%rename(__lt__) operator<;
%include "dtypes.h"


%include "Interface.h"


// Wrap State.h
%ignore hash;
%rename(__ostream__) operator<<;
%include "State.h"


%attribute(StateOne, double, energy, getEnergy);
%extend StateOne {
  __STR__();
};


%attribute(StateTwo, double, energy, getEnergy);
%extend StateTwo {
  __STR__();
};


// Wrap Basis.h
%include "BasisBase.h"
%template(BasisStateOne) Basis<StateOne>;
%template(BasisStateTwo) Basis<StateTwo>;
%include "Basis.h"

%attribute(BasisOne, std::vector<StateOne>&, states  , getStates  );
%attribute(BasisTwo, std::vector<StateOne>&, states  , getStates  );
%attribute(BasisOne, std::vector<double>&  , energies, getEnergies);
%attribute(BasisTwo, std::vector<double>&  , energies, getEnergies);


// Python specific extensions

// This block has to be the last in the Interface.i file, because it
// will be copied literally into the Python module and we want to
// overwrite specific methods, defined before.

%pythoncode %{

from scipy.sparse import csc_matrix
import numpy as np

# TODO make conversion of "eigen_sparse_t" to "csc_matrix" with less
# copying and less overhead (work with pointern,
# PyArray_SimpleNewFromData, access internal arrays of csc_matrix)

def getCoefficients (self):
    num_rows = self._getCoefficientsNumrows()
    num_cols = self._getCoefficientsNumcols()
    indptr = self._getCoefficientsIndptr()
    indices = self._getCoefficientsIndices()
    data = self._getCoefficientsData()
    return csc_matrix((data, indices, indptr), shape=(num_rows, num_cols)) # TODO copy=False

class vector_to_numpy:
    def __init__(self, method):
        self.method = method

    def __call__(self, *args):
        return np.array( self.method(*args) )

class numpy_to_vector:
    def __init__(self, method, *args):
        self.method = method
        self.args   = args

    def __call__(self, ndarray):
        dtype = ndarray.dtype
        size = len(ndarray)

        # Decide datatype
        if np.issubdtype(dtype, np.float):
            v = VectorDouble(size)
        elif np.issubdtype(dtype, np.complex):
            v = VectorComplexDouble(size)
        else:
            raise TypeError("Unhandled type {}".format(dtype))

        # Copy over data
        v[:] = ndarray[:]

        # Hand over to method
        self.method(v,*self.args)

BasisOne.getCoefficients = getCoefficients
BasisTwo.getCoefficients = getCoefficients
BasisOne.energies = property(vector_to_numpy(BasisOne.getEnergies))
BasisTwo.energies = property(vector_to_numpy(BasisTwo.getEnergies))

%}
