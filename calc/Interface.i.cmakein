%module(docstring="C++ backend for @DATATYPE@ matrices") pairinteraction_@DATATYPE@

%{
#include "dtypes.h"
#include "Interface.h"
#include "State.h"
#include "Basis.h"
%}


%feature("autodoc", "3");


%include "attribute.i"
%include "exception.i"
%include "std_array.i"
%include "std_complex.i"
%include "std_string.i"
%include "std_vector.i"


// Convert C++ exceptions to Python exceptions
// http://www.swig.org/Doc1.3/Library.html#Library_stl_exceptions
%exception {
  try {
    $action
  } catch (const std::exception& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  }
}


// Wrap the << operator
// http://stackoverflow.com/questions/2548779/how-to-stringfy-a-swig-matrix-object-in-python
%define __STR__()
std::string __str__() {
  std::ostringstream out;
  out << *$self;
  return out.str();
}
%enddef


// Instantiate often used STL templates
namespace std {
  %template(ArrayStringTwo) array<string,2>;
  %template(ArrayIntTwo) array<int,2>;
  %template(ArrayFloatTwo) array<float,2>;
  %template(VectorInt) vector<int>;
  %template(VectorDouble) vector<double>;
  %template(VectorFloat) vector<float>;
  %template(VectorStateOne) vector<StateOne>;
  %template(VectorStateTwo) vector<StateTwo>;
  %template(VectorSizeT) vector<size_t>;
  %template(VectorComplexDouble) vector<std::complex<double>>;
};

%rename(__lt__) operator<;
%include "dtypes.h"


%include "Interface.h"


// Wrap State.h
%ignore hash;
%rename(__ostream__) operator<<;
%include "State.h"


%attribute(StateOne, double, energy, getEnergy);
%extend StateOne {
  __STR__();
};


%attribute(StateTwo, double, energy, getEnergy);
%extend StateTwo {
  __STR__();
};


// Wrap Basis.h
%include "BasisBase.h"
%template(BasisStateOne) Basis<StateOne>;
%template(BasisStateTwo) Basis<StateTwo>;
%include "Basis.h"


%pythoncode %{

# TODO make conversion of "eigen_sparse_t" to "csc_matrix" with less copying and less overhead (work with pointern, PyArray_SimpleNewFromData, access internal arrays of csc_matrix)

from scipy.sparse import csc_matrix
import numpy as np
def getCoefficients (self):
    num_rows = self._getCoefficientsNumrows()
    num_cols = self._getCoefficientsNumcols()
    indptr = self._getCoefficientsIndptr()
    indices = self._getCoefficientsIndices()
    data = self._getCoefficientsData()
    return csc_matrix((data, indices, indptr), shape=(num_rows, num_cols)) # TODO copy=False

BasisOne.getCoefficients = getCoefficients
BasisTwo.getCoefficients = getCoefficients

%}
